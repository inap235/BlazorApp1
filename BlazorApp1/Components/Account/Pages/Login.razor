@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlazorApp1.Data
@using Microsoft.AspNetCore.Identity.UI.Services
@using Microsoft.AspNetCore.WebUtilities
@using System.Text.Encodings.Web
@using System.Text

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IEmailSender EmailSender

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>

<div class="row">
    <div class="col-lg-6">
        <section>
            <StatusMessage Message="@StatusMessage" />

            <EditForm Model="Input" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                
                <h2>Use a local account to log in</h2>
                <hr />

                <!-- Email -->
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" placeholder="name@example.com" />
                    <label for="Input.Email">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>

                <!-- Password -->
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" placeholder="Password" />
                    <label for="Input.Password">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>

                <!-- Remember me -->
                <div class="form-check mb-3">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" id="Input.RememberMe" />
                    <label class="form-check-label" for="Input.RememberMe">Remember me?</label>
                </div>

                <button type="submit" class="w-100 btn btn-lg btn-primary mb-3">Log in</button>

                <!-- Links -->
                <p><a href="Account/ForgotPassword">Forgot your password?</a></p>
                <p>
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                </p>
                <p>
                    <a href="#" @onclick="ResendEmailConfirmationAsync">Resend email confirmation</a>
                </p>
            </EditForm>
        </section>
    </div>

    <div class="col-lg-4 offset-lg-2">
        <section>
            <h3>Use another service to log in</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>

@code {
    private string? StatusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    private async Task LoginUser()
    {
        if (string.IsNullOrWhiteSpace(Input.Email) || string.IsNullOrWhiteSpace(Input.Password))
        {
            StatusMessage = "Email and password are required.";
            return;
        }

        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl ?? "/");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            StatusMessage = "Invalid login attempt.";
        }
    }

    private async Task ResendEmailConfirmationAsync()
    {
        StatusMessage = null;

        if (string.IsNullOrWhiteSpace(Input.Email))
        {
            StatusMessage = "Please enter your email first.";
            return;
        }

        try
        {
            var user = await UserManager.FindByEmailAsync(Input.Email);
            if (user is null)
            {
                StatusMessage = "User not found.";
                return;
            }

            var token = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            var encodedToken = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(token));

            var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = user.Id, ["code"] = encodedToken });

            var subject = "Confirm your email";
            var htmlMessage = $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.";

            try
            {
                await EmailSender.SendEmailAsync(Input.Email, subject, htmlMessage);
                StatusMessage = "Confirmation email sent. Please check your email.";
            }
            catch (Exception emailEx)
            {
                Logger.LogError(emailEx, "Failed to send confirmation email.");
                StatusMessage = $"Failed to send email: {emailEx.Message}";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in ResendEmailConfirmationAsync");
            StatusMessage = $"An unexpected error occurred: {ex.Message}";
        }
    }
}
