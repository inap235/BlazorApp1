@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.UI.Services
@using Microsoft.AspNetCore.WebUtilities
@using BlazorApp1.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject IEmailSender EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-lg-6">

        @if (UserCreated)
        {
            <div class="alert alert-info">
                <p>Your account has been created! A confirmation email has been sent.</p>
                <p>Please check your email and <a href="@ConfirmationLink">click here to confirm your account</a>.</p>
                <p>If you did not receive the email, click the button below to resend it:</p>
                <button class="btn btn-secondary" @onclick="ResendConfirmationEmailAsync">Resend Confirmation Email</button>

                @if (!string.IsNullOrEmpty(StatusMessage))
                {
                    <div class="mt-2 text-info">@StatusMessage</div>
                }
            </div>
        }
        else
        {
            <EditForm Model="Input" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <h2>Create a new account</h2>
                <hr />

                <!-- Email -->
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" placeholder="name@example.com" />
                    <label for="Input.Email">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>

                <!-- Password -->
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" placeholder="Password" />
                    <label for="Input.Password">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>

                <!-- Confirm Password -->
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" placeholder="Confirm Password" />
                    <label for="Input.ConfirmPassword">Confirm Password</label>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </div>

                <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
            </EditForm>
        }
    </div>
</div>

@code {
    private bool UserCreated = false;
    private string? ConfirmationLink;
    private string? StatusMessage;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task RegisterUser()
    {
        // Create user
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        var result = await UserManager.CreateAsync(user, Input.Password);
        if (!result.Succeeded)
        {
            foreach (var error in result.Errors)
            {
                Logger.LogWarning(error.Description);
            }
            return;
        }

        Logger.LogInformation("User created a new account.");

        // Send confirmation email
        await SendConfirmationEmailAsync(user);
        UserCreated = true;
    }

    private async Task ResendConfirmationEmailAsync()
    {
        if (string.IsNullOrWhiteSpace(Input.Email))
        {
            StatusMessage = "Please enter your email in the registration form first.";
            return;
        }

        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            StatusMessage = "User not found.";
            return;
        }

        await SendConfirmationEmailAsync(user);
        StatusMessage = "Confirmation email resent. Please check your email.";
    }

    private async Task SendConfirmationEmailAsync(ApplicationUser user)
    {
        var userId = await UserManager.GetUserIdAsync(user);
        var token = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        var encodedToken = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(token));

        // Build confirmation URL
        ConfirmationLink = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = encodedToken });

        await EmailSender.SendEmailAsync(
            Input.Email,
            "Confirm your email",
            $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(ConfirmationLink)}'>clicking here</a>."
        );
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    public sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
